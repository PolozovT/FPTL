Создавать для вызовов одной и той же функции с одинаковыми параметрами только одну задачу.
Считывание параметров из консоли (начального кортежа).
?Функция, возвращающая размер кортежа.?
?Возможность получать элемент с конца кортежа.?
Внешние библиотеки.
Именованные параметры.
Статическая типизация.
Функция, возвращающая арность данной функции.
Компилятор.
Удалять данные, которые не потребуются далее.

Баг с одновременной отменой задач.
Не выводит статистику при интегрировании Func2 с параметрами 1, 20, 0.0000001 на 8 ядрах.
Out of memory в быстрой сортировке при подаче на вход обратно отсортированного списка длинной 2000 и более.
Некорректный вывод сообщения об ошибке.
	Data List['t]
	{
		List = c_nil ++ 't * List['t].c_cons;
	}
	Scheme QuickSort
	{
		@ = ~c_nil -> c_nil, 0;
	} 
	Application
	% QuickSort
Баг с областью видимости.
	Scheme Test
	{
		@ = Test1.print;	
		A = [1];	
		Fun Test1
		{
			@ = A * Test2;	// Видит А		
			Fun Test2
			{
				@ = A;	// Не видит А
			}
		}
	}
Операции над массивами изменяют входные данные, ломая тем самым парадигму функционального программирования.
	@ = Create.(([1]*0*123).arraySet*([1]*1*456).arraySet).print;
	// [123,456]*[123,456]
    Create = (2*0).arrayCreate;