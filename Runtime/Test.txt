Data Foo['s,'t]
{
	Foo = 't*'t.c_foo;
}

Data Bar
{
	Bar = Foo[int,float].c_bar;
}

Data List['t]
{
	List = c_nil ++ 't * List['t].c_cons;
}

Data Tree['t]
{
	Tree = c_leaf ++ Tree['t] * 't * Tree['t].c_node;
}

Data Complex
{
	Complex = double * double.c_complex;
}

Scheme Fact
{
	//@ = ("123456" * "(12)(34.+)").match.print;
	//@ = ("123456" * "1." * "67").replace.print;
	//@ = ("12345678" * "1..").getToken.print;
	//@ = "Test.txt".readFile.print;

	//@ = 33.Fib;

	//@ = (10.toString * " 2").cat.print;

	//@ = ((1*1).equal -> true, false).print;

	@ = (1 * "abc").add;
	//@ = 50000.RandomList(-999999,999999).QSort;

	//@ = (10 * c_nil).c_cons.Sum;

	//@ = id.GenSinSignal.FFT;

	Sum = ~c_nil -> 0, ~c_cons.([1]*[2].Sum).add;

	//@ = (10.0*c_nil).c_cons;

	//@ = (0.000001 * 10.0 * 0.00001).Integrate(TestFunc1);

	TestFunc = (((((id*id).mul*id).mul * 0.5).mul.sin * ((id*id).mul * 0.25).mul.sin).mul * (id * 0.125).mul.sin).mul;

	TestFunc1 = (1.0*([1].exp*[1]).mul).div;

	Fun RandomList[Max, Min]
	{
		@ = (id * 0).equal -> c_nil,
		    ((Min * (rand * (Max * Min).sub).mul).add * (id * 1).sub.RandomList).c_cons; 
	}

	Fun Fib
	{
		@ = ([1]*0).equal -> 1,
		    ([1]*1).equal -> 1,
		    ((([1]*2).sub.Fib*([1]*1).sub.Fib).add);
	}

	Fun Sum
	{
		@ = id.~c_nil -> 0,
		    id.~c_cons -> id.~c_cons.([1] * [2].Sum).add;
			
	}

	Fun GenList
	{
		@ = (id*0).equal -> c_nil,
		    (id*(id*1).sub.GenList).c_cons;
	}

	// Elem * Tree -> Tree
	Fun TreeInsert
	{
		@ = [2].~c_leaf -> (c_leaf * [1] * c_leaf).c_node,
		    [2].~c_node -> (([1]*[2].~c_node.[2]).less ->
		                   (([1]*[2].~c_node.[1]).TreeInsert * [2].~c_node.([2]*[3])).c_node,
		                   ([2].~c_node.([1]*[2])*([1]*[2].~c_node.[3]).TreeInsert).c_node);
	}

	Fun QSort
	{
		/*@ = ~c_nil -> c_nil,
			(((id*Pivot).Filter(less).QSort * (id*Pivot).Filter(equal)).Concat * (id*Pivot).Filter(greater).QSort).Concat;*/

		@ = ~c_nil -> c_nil, 
            (
                (id * Pivot).Filter(greater).QSort * 
                (id * Pivot).Filter(equal) * 
                (id * Pivot).Filter(less).QSort
            ).Concat3;

		Fun Filter[fPredicate]
		{
			@ = [1].~c_nil -> c_nil,
				Args.(([1]*[3]).fPredicate -> ([1] * ([2]*[3]).Filter).c_cons, ([2]*[3]).Filter);

			Args = [1].~c_cons * [2];
		}

		NoFilter = (1 * 1).equal;

		// Возвращает опорный элемент (первый в списке).
		Pivot = id.~c_cons.[1];

		Concat = [1].~c_nil -> [2],
				 [2].~c_nil -> [1],
				([1].~c_cons.[1] * ([1].~c_cons.[2]*[2]).Concat).c_cons;

		//Concat3 = (([1] * [2]).Concat * [3]).Concat;
		Concat3 = ([1] * ([2] * [3]).Concat).Concat;
	}

	// Параметра A*B*Eps - границы отрезка интегрирования и точность.
	Fun Integrate[fFunction]
	{
		@ = (((([1] * Mid).Trp * (Mid * [2]).Trp).add * ([1] * [2]).Trp).sub.abs * [3]).less ->
			([1] * [2]).Trp,
			((([1] * Mid * ([3] * 2.0).div).@ * (Mid * [2] * ([3] * 2.0).div).@).add);

		Mid = (([1] * [2]).add * 2.0).div;

		Trp = ((([2] * [1]).sub * ([2].fFunction * [1].fFunction).add).mul * 2.0).div;
	}

	// Быстрое преобразование Фурье. Входные данные A - список вещественных чисел, длина - степень двойки.
	Fun FFT
	{
		@ = (N * 1).equal -> id,
		    (OddCoeff.FFT * EvenCoeff.FFT * W * Wn).(Form(Op1, CompMul) * Form(Op2, CompMul)).Concat;

		EvenCoeff =
			~c_nil -> c_nil,
			~c_cons.[2].~c_nil -> c_nil,
			~c_cons.[2].~c_cons.([1] * [2].EvenCoeff).c_cons;

		OddCoeff =
			~c_nil -> c_nil,
			~c_cons.[2].~c_nil -> ~c_cons.[1],
			~c_cons.([1] * [2].~c_cons.[2].OddCoeff).c_cons;

		N = id.Length;

		Wn = (0.0 * ((2.0 * 3.141592).mul * N).div).c_complex.CompExp;

		W = (1.0 * 0.0).c_complex;

		// Входные данные EvenCoeff, OddCoeff, W, Wn
		Fun Form[aOperation, aMul]
		{
			@ = [1].~c_nil -> c_nil,
				((Ec * Oc * W).aOperation * ([1].~c_cons.[2] * [2].~c_cons.[2] * NewW * Wn).Form).c_cons;

			Ec = [1].~c_cons.[1];
			Oc = [2].~c_cons.[1];
			W = [3];

			Wn = [4];

			NewW = (W * Wn).aMul;
		}

		CompAdd = (([1].Real * [2].Real).add * ([1].Im * [2].Im).add).c_complex;
		CompSub = (([1].Real * [2].Real).sub * ([1].Im * [2].Im).sub).c_complex;

		CompMul = ( (([1].Real*[2].Real).mul*([1].Im*[2].Im).mul).sub * (([1].Im*[2].Real).mul * ([1].Real*[2].Im).mul).add).c_complex;

		CompExp = ((Real.exp * Im.cos).mul * (Real.exp * Im.sin).mul).c_complex;

		Real = ~c_complex.[1];
		Im = ~c_complex.[2];
			

		Op1 = ([1] * ([2] * [3]).CompMul).CompAdd;
		Op2 = ([1] * ([2] * [3]).CompMul).CompSub;

		Length = ~c_nil -> 0, (~c_cons.[2].Length * 1).add;

		Concat = [1].~c_nil -> [2],
				 [2].~c_nil -> [1],
				([1].~c_cons.[1] * ([1].~c_cons.[2]*[2]).Concat).c_cons;
	}

	Fun GenSignal[Generator]
	{
		@ = (id * 0).equal -> c_nil,
		    (id.Generator * (id * 1).sub.GenSignal).c_cons;
	}

	SinSignal = ((id * 1024.0).div * 3.141592).mul.(id * sin).c_complex;

	GenSinSignal = GenSignal(SinSignal);

}

Application

Signal = ((0.0 * 0.0).c_complex
	* ((0.0 * 0.0).c_complex
	* ((0.0 * 0.0).c_complex
	* ((0.0 * 0.0).c_complex
	* ((0.0 * 0.0).c_complex
	* ((0.0 * 0.0).c_complex
	* ((0.0 * 0.0).c_complex
	* ((0.0 * 0.0).c_complex
	* c_nil).c_cons).c_cons).c_cons).c_cons).c_cons).c_cons).c_cons).c_cons;

% Fact(16384)