//Петров Алексей А-13-11

Data List['t]
{
   List = c_nil ++ 't * List['t].c_cons;
}

Scheme Sort
{       

	@ =  (123 * 100000).AlmostRandomList.MergeSort;

       // @ =  toTest.MergeSort.print;
       // toTest = (10 * (9 * (8 * (1 * (3 * (3 * (3 * (2 * (4 * (5 * (-10 * c_nil).c_cons).c_cons).c_cons).c_cons).c_cons).c_cons).c_cons).c_cons).c_cons).c_cons).c_cons;


        //генерация "случайных" чисел
        //IN: [1] - произвольное чилсо, [2] - необхоидмое кол-во чисел в списке
	Fun AlmostRandomList
        {
           Xn = ((([1] * 16807).mul * 1234).add * 10000).mod;

           @ = ([2] * 1).equal -> (Xn * c_nil).c_cons,
               (Xn * (Xn * ([2] * 1).sub).AlmostRandomList).c_cons;
	}
        

       
       //слияние сортированных списков
       //IN: [1] - сортированный список, [2] - сортированный список,
       //OUT: сортированный список
        Merge = [1].~c_nil -> [2],
                [2].~c_nil -> [1],
                ([1].~c_cons.[1] * [2].~c_cons.[1]).lequal -> ([1].~c_cons.[1] * ([1].~c_cons.[2] * [2]).Merge).c_cons,
                                                              ([2].~c_cons.[1] * ([1] * [2].~c_cons.[2]).Merge).c_cons;    


       //Длина списка

        Len = [1].~c_nil -> 0,
              ([1].~c_cons.[2].Len * 1).add;

          
       // IN: [1] - список, [2] - количество элементов
       // OUT: список из первых [2] элементов списка[1]  

        TakeFirst = ([1].~c_nil) -> c_nil,
                    ([2] * 0).equal -> c_nil,
                    ([1].~c_cons.[1] * ([1].~c_cons.[2] * ([2] * 1).sub ).TakeFirst).c_cons;

      
  
       // IN: [1] - список, [2] - количество элементов
       // OUT: Возвращает список[1], только без первых [2] элементов   
        
        TakeRest =  ([1].~c_nil) -> c_nil,
                    ([2] * 1).equal -> [1].~c_cons.[2],
                    ([1].~c_cons.[2] * ([2] * 1).sub ).TakeRest;         

        
       // Сортировка
       // IN: [1] - список
       // OUT: сортированный список
        MergeSort = ([1].Len * 1).equal -> [1],
                    ([1].Len * 0).equal -> [1],
                    ( (([1] * Mid).TakeFirst.MergeSort) * (([1] * Mid).TakeRest.MergeSort) ).Merge;     
             
             
        Mid = ([1].Len * 2).div;                   
        
                    
}

Application
% Sort