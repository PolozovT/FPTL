//описание типа данных "список" 
Data List['t]
{
   List = c_nil ++ 't * List['t].c_cons;
   
   // 't - некоторый тип данных (аналог шаблона в c++)
   
   // c_nil - конструктор, который вводим для обозначения конца списка.
   // Деструктор ~c_nil возвращает пустой кортеж,
   // что трактуется как "true",
   // если был применён к конструктору c_nil,
   // иначе возвращает undefined, 
   // что трактуется как "false".
   
   // Конструктор всегда должен начинаться с "c_". 
   
   // ++ - объединение множеств.
   
   // c_cons - конструктор, обозначающий 
   // операцию присоединения элемента типа 't к списку. 
   // Деструктор ~c_cons будет возвращать кортеж 
   // 't * List['t] (кортеж из головы и хвоста списка), 
   // если применён к конструктору c_cons,
   // иначе undefined.
   
   // Т.е. списоком может быть либо c_nil, либо конструкция вида ('t * List['t]).c_cons
}

// Объединение двух списков. На входе должен быть кортеж из 2 списков.
// Если во входном кортеже больше 2 элементов использоваться будут первые два.
// Если меньше или подаются не списки, то корректный результат получен не будет.
Scheme Concat
{
// Вызов первого варианта.
@ = Concat1.print * ("\n").print;

// Вызов второго варианта.
//@ = Concat2.print;

Fun Concat1
{
@ = 
[1].~c_nil -> 				// Проверяем, является ли первый список пустым.
[2], 						// Если да, возвращаем второй.
[2].~c_nil -> 				// Иначе проверяем, является ли второй список пустым.
[1], 						// Если да, возвращаем первый.
([1].~c_cons.[1] * 			// Получаем голову первого списка.
	([1].~c_cons.[2] * 		// Получаем хвост первого списка.
	[2]).Concat1			// Применяем к хвосту первого списка и второму списку функцию Concat1 - 
							// получаем объединённый список.
).c_cons;					// Применяем к голове первого списка и полученному списку конструктор c_cons.
}

Fun Concat2
{
// Эквивалентное представление
Concat2 = 
[1].~c_nil ->				// Проверяем, является ли первый список пустым.
[2], 						// Если да, возвращаем второй.
[2].~c_nil -> 				// Иначе проверяем, является ли второй список пустым.
[1], 						// Если да, возвращаем первый.
([1].~c_cons * 				// Получаем кортеж из головы и хвоста первого списка.
	[2]
).([1] * 					// Получаем первый элемент предыдущего кортежа (голову первого списка).
	([2] * 					// Получаем второй элемент предыдущего кортежа (хвост первого списка).
		[3]					// Получаем третий элемент предыдущего кортежа (второй список).
	).@						// Применяем к хвосту первого списка и второму списку функцию Concat2 - 
							// получаем объединённый список.
  ).c_cons;					// Применяем к голове первого списка и полученному списку конструктор c_cons.
}
}

Application

List1 = (1 * (2 * c_nil).c_cons).c_cons;
List2 = (3 * (4 * c_nil).c_cons).c_cons;

%Concat(List1, List2)